#test version at https://gist.github.com/1620307
#
# author cedric.walter, www.waltercedric.com
# to be saved in /etc/nginx/nginx.conf
 
user www-data;

daemon off;
 
# = to the number of CPU - 1
# you may want to leave one core for the system and its interrupts 
# and the other cores for the web server
worker_processes 4;
 
pid /var/run/nginx.pid;
 
events {
 # worker_connections : This is the amount of client connections a
 # single child process will handle by themselves at any one time.
 # (default: 1024) Note: Multiply worker_processes times worker_connections
 # for the total amount of connections Nginx will handle. Our example is
 # setup to handle 3*64=192 concurrent connections in total. Clients who
 # connect after the max has been reached will be denied access.
 worker_connections 1024;
 # multi_accept on;
}
 
http {
  ##
  # Basic Settings
  ##
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  types_hash_max_size 2048;
 
  ## Hardening ####
  server_tokens off;
    
  ### (default is 8k or 16k) The directive specifies the client request body buffer size.
  # If the request body is more than the buffer, then the entire request body or some part is written in a temporary file.
  client_body_buffer_size 8K;
  #secure is 1K!


  ### Directive sets the headerbuffer size for the request header from client. For the overwhelming 
  ### majority of requests a buffer size of 1K is sufficient. Increase this if you have a custom header
  ### or a large cookie sent from the client (e.g., wap client).
  client_header_buffer_size 1k;  
  
  ### Directive assigns the maximum accepted body size of client request, indicated by the line Content-Length
  ### in the header of request. If size is greater the given one, then the client gets the error 
  ### "Request Entity Too Large" (413). Increase this when you are getting file uploads via the POST method.
  client_max_body_size 2m;
  # secure is 1K!  

  ### Directive assigns the maximum number and size of buffers for large headers to read from client request. 
  ### By default the size of one buffer is equal to the size of page, depending on platform this either 4K or 8K, 
  ### if at the end of working request connection converts to state keep-alive, then these buffers are freed. 
  ### 2x1k will accept 2kB data URI. This will also help combat bad bots and DoS attacks.
  large_client_header_buffers 2 1k;
  
  ### The first parameter assigns the timeout for keep-alive connections with the client. 
  ### The server will close connections after this time. The optional second parameter assigns 
  ### the time value in the header Keep-Alive: timeout=time of the response. This header can 
  ### convince some browsers to close the connection, so that the server does not have to. Without 
  ### this parameter, nginx does not send a Keep-Alive header (though this is not what makes a connection "keep-alive").
  keepalive_timeout 300 300;
  #secure is 5 5 !


  ### Directive sets the read timeout for the request body from client. 
  ### The timeout is set only if a body is not get in one readstep. If after 
  ### this time the client send nothing, nginx returns error "Request time out" 
  ### (408). The default is 60.
  client_body_timeout 10;
  
  ### Directive assigns timeout with reading of the title of the request of client. 
  ### The timeout is set only if a header is not get in one readstep. If after this
  ### time the client send nothing, nginx returns error "Request time out" (408).
  client_header_timeout 10;
  
  ### Directive assigns response timeout to client. Timeout is established not on entire
  ### transfer of answer, but only between two operations of reading, if after this time
  ### client will take nothing, then nginx is shutting down the connection.
  send_timeout 10;
 
  ### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###
  ### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session ###
  limit_zone slimits $binary_remote_addr 5m;
 
  ### Control maximum number of simultaneous connections for one session i.e. ###
  ### restricts the amount of connections from a single ip address ###
  limit_conn slimits 5;
 
  ### Solve upstream sent too big header while reading response header from upstream
  ### http://wiki.nginx.org/HttpProxyModule
  # This directive set the buffer size, into which will be read the first part of the response, obtained from the proxied server.
  # Default:	4k|8k
  proxy_buffer_size   128k;
  # This directive sets the number and the size of buffers, into which will be read the answer, obtained from the proxied server. 
  # By default, the size of one buffer is equal to the size of page. Depending on platform this is either 4K or 8K.
  proxy_buffers   4 256k;
  proxy_busy_buffers_size   256k;
 
  fastcgi_buffers 8 16k;
  fastcgi_buffer_size 32k;
 
 
  # server_names_hash_bucket_size 64;
  # server_name_in_redirect off;
 
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
 
  ##
  # Logging Settings
  ##
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;
 
  ##
  # Gzip Settings
  ##
  gzip  on;
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
  gzip_buffers 16 8k;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)"; 
 
  ##
  # Virtual Host Configs
  ##
 
  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;
}
